#include <iostream>#include <array>#include <vector>using namespace std;void printVector(vector<int> a){    for (size_t i=0; i < a.size(); i++)        cout << a[i] << " ";    cout << endl;    cout << "////";    cout << endl;}void printArray(int a[], int n){    for(int i = 0; i < n; i++)        cout << a[i] << " ";    cout << endl;    cout << "////";    cout << endl;}/* * 1. Maximum subarray problem. Give an array, find the contiguous subarray that has the largest sum. (The array must have at least 1 positive number)*/int maxSub(int a[], int len){    int maxSoFar = 0;    int maxEndHere = 0;    for (int i=0; i < len; i++){        maxEndHere = maxEndHere + a[i];        cout << maxEndHere << endl;        if (maxEndHere <= 0){            maxEndHere = 0;        }        if (maxSoFar < maxEndHere){            maxSoFar = maxEndHere;        }    }    cout << maxSoFar << endl;    return maxSoFar;}/* * 2. Longest increasing subsequence (LIS) * unlike substrings, subsequences are not required to occupyconsecutive positions within the original sequences.*/int cellInx(vector<int> b, int l, int r, int val){    while (r - l > 1){        int m = (l + r)/2;        if (b[m] >= val)            r = m;        else            l = m;    }    cout << "#" << r << endl;    return r;}vector<int> lis(vector<int> a){    vector<int> b;    b.push_back(a[0]);    int sz = 1;    for (size_t i = 0; i < a.size(); i++){        if(a[i] < b[0]){            b[0] = a[i];        }else if (a[i] > b[sz - 1]){            b.push_back(a[i]);            sz++;        }else{            b[cellInx(b, 0, sz-1, a[i])] = a[i];        }        //printVector(b);        cout << i << " "<< b[sz-1] << " " << sz << endl;    }    cout << b[5];    return b;}/* * 3. Rotate array by d elements. */void reverse(vector<int> &a, int l, int r){    while (l < r){        swap(a[l], a[r]);        l++;        r--;    }}void rotate(vector<int> &a, int d){    int n = a.size();    cout << n<< endl;    reverse(a, 0, d-1);    reverse(a, d, n-1);    reverse(a, 0, n-1);}/* *  4. Find max difference in an unsorted array. The index of min < index of max *  Can't sort the array.  *  similiar: https://leetcode.com/problems/best-time-to-buy-and-sell-stock/ */int maxDiff(int a[], int n){    int maxDiff = 0;    int minNum = a[0];    for(int i=1; i < n; i++){        if (a[i] - minNum > maxDiff)            maxDiff = a[i] - minNum;        if (a[i] < minNum)            minNum = a[i];    }    return maxDiff;}/* * 5. randomizing an array (shuffle alforithm) */void shuffle(int a[], int n){    for(int i=n-1; i >= 0; i--){        int j = rand() % (i+1);        swap(a[j], a[i]);    }    cout << endl;}/* * 6. Given a array of int, find two numbers with sum as a given x */int main(){    int a[13] = {1, 9, 3, 8, 11, 4, 5, 6, 4, 19, 7, 1, 8};    vector<int> ab (a, a + sizeof(a)/sizeof(a[0]));    //maxSub(a, 6);    //vector<int> b = lis(ab);    //rotate(ab, 3);    //printVector(b);    int b = maxDiff(a, 13);    shuffle(a, 13);    printArray(a, 13);    return 0;}