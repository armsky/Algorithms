#include <iostream>#include <array>#include <vector>using namespace std;void printVector(vector<int> a){    for (size_t i=0; i < a.size(); i++)        cout << a[i] << " ";    cout << endl;    cout << "////";    cout << endl;}/* * 1. Maximum subarray problem. Give an array, find the contiguous subarray that has the largest sum. (The array must have at least 1 positive number)*/int maxSub(int a[], int len){    int maxSoFar = 0;    int maxEndHere = 0;    for (int i=0; i < len; i++){        maxEndHere = maxEndHere + a[i];        cout << maxEndHere << endl;        if (maxEndHere <= 0){            maxEndHere = 0;        }        if (maxSoFar < maxEndHere){            maxSoFar = maxEndHere;        }    }    cout << maxSoFar << endl;    return maxSoFar;}/* * 2. Longest increasing subsequence (LIS) * unlike substrings, subsequences are not required to occupyconsecutive positions within the original sequences.*/int cellIn(vector<int> b){}int cellInx(vector<int> b, int l, int r, int val){    while (r - l > 1){        int m = (l + r)/2;        if (b[m] >= val)            r = m;        else            l = m;    }    cout << "#" << r << endl;    return r;}vector<int> lis(vector<int> a){    vector<int> b;    b.push_back(a[0]);    int sz = 1;    for (size_t i = 0; i < a.size(); i++){        if(a[i] < b[0]){            b[0] = a[i];        }else if (a[i] > b[sz - 1]){            b.push_back(a[i]);            sz++;        }else{            b[cellInx(b, 0, sz-1, a[i])] = a[i];        }        //printVector(b);        cout << i << " "<< b[sz-1] << " " << sz << endl;    }    cout << b[5];    return b;}int main(){    int a[] = {1, 9, 3, 8, 11, 4, 5, 6, 4, 19, 7, 1, 8};    vector<int> ab (a, a + sizeof(a)/sizeof(a[0]));    //maxSub(a, 6);    vector<int> b = lis(ab);    printVector(b);    return 0;}